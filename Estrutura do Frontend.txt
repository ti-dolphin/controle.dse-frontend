Estrutura do Frontend
	public/                  # Static assets (e.g., images, favicon)
│   ├── index.html
│   └── assets/
├── src/                     # Source code
│   ├── assets/              # Global styles, images, fonts
│   │   ├── styles/          # Global CSS/SCSS files
│   │   └── images/
│   ├── components/          # Reusable UI components
│   │   ├── common/          # Generic components (e.g., Button, Input)
│   │   ├── requisicoes/     # Module-specific components for requests
│   │   ├── patrimonios/     # Module-specific components for assets
│   │   └── oportunidades/   # Module-specific components for opportunities
│   ├── models/              # Data models and interfaces
│   │   ├── requisicoes/     # Request-related models
│   │   ├── patrimonio/      # Asset-related models
│   │   └── oportunidade/    # Opportunity-related models
│   ├── services/            # Data logic and API calls
│   │   ├── requisicoes/     # Request-related services
│   │   ├── patrimonios/     # Asset-related services
│   │   └── oportunidades/   # Opportunity-related services
│   ├── hooks/               # Custom hooks for reusable logic
│   │   ├── useForm.ts       # Form validation and management hook
│   │   └── useFeedback.ts   # Feedback system hook
│   ├── utils/               # Utility functions
│   │   ├── validators.ts    # Form validation utilities
│   │   └── helpers.ts       # General helper functions
│   ├── store/               # State management (e.g., Redux, Context)
│   │   ├── feedback/        # Global feedback state
│   │   └── index.ts         # Store configuration
│   ├── pages/               # Page-level components (routes)
│   │   ├── requisicoes/     # Request module pages
│   │   ├── patrimonios/     # Asset module pages
│   │   └── oportunidades/   # Opportunity module pages
│   ├── App.tsx              # Root component
│   ├── index.tsx            # Entry point
│   └── types.d.ts           # Global type definitions (if using TypeScript)
├── tests/                   # Unit and integration tests
├── .gitignore               # Git ignore file
├── package.json             # Project dependencies and scripts
└── tsconfig.json            # TypeScript configuration (if applicable)

redux 
	store.ts
	root_reducer.ts
	user/
	   -reducer 
	opportunity/
	   - reducer
	requisition/
	   - reducer 
	patrimony/
	   - reducer 

componentes globais 
	
	AuthForm.tsx
    DataTable.tsx   
            - datagrid material UI 
            - dependencias: columns, data, styles?, rowHeight?, columnFilterEnabled
    DeleteRegisterDialog.tsx    
            funcionalidade: exibe "Tem certeza que deseja exlcuir este registro"? 
            dependencias: onConfirm, onCancel, message
    CardList
            dependencias: data (any[]), deleteButtonEnabled, onDeletButtonClick, 
            funcionalidade: exibe uma lista de cards com o atributo "arquivo" do tipo data 
    

Componentes de cada módulo
	requisicoes
		- RequisitionForm.tsx
        - RequisitionListTable.tsx
        - RequisitionItemListTable.tsx
	oportunidades
		- OportunityForm.tsx
        - OpportunityListTable.tsx
        - OpportunityFollowersListTable.tsx
        - OpportuntiyAttachmentList.tsx
	patrimônios 
		- PatrimonyForm.tsx
        - PatrimonyListTable.tsx
        - ChecklistListTable.tsx   
        - MovementationListTable.tsx
	    - PatrimonyAttachMentList.tsx


Páginas: 
	requisicoes
		- Home.tsx
		- RequisitionListPage.tsx
		- RequisitionDetailPage.tsx
		- QuoteDetailPage.tsx

 	patrimonios
		- Home.tsx
		- PatrimonyListPage.tsx
		- PatrimonyDetailPage.tsx
		- ChecklistListPage.tsx
		
	oportunidades
		- OportunityListPage.tsx
		- OportunityDetailPage.tsx
        - OpportunityCreationModal.tsx  
        - OpportunityForm.tsx   
